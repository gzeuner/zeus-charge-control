# Datasource - Storage for prices etc ##################
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:h2:mem:testdb}
spring.datasource.driverClassName=${SPRING_DATASOURCE_DRIVER_CLASS_NAME:org.h2.Driver}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:sa}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:password}
spring.jpa.database-platform=${SPRING_JPA_DATABASE_PLATFORM:org.hibernate.dialect.H2Dialect}
spring.jpa.open-in-view=${SPRING_JPA_OPEN_IN_VIEW:false}
spring.h2.console.enabled=${SPRING_H2_CONSOLE_ENABLED:true}
spring.h2.console.path=${SPRING_H2_CONSOLE_PATH:/h2-console}

#i18n
spring.messages.basename=messages
spring.messages.encoding=UTF-8


# Accept external connections
server.address=${SERVER_ADDRESS:0.0.0.0}
server.port=${SERVER_PORT:8080}

spring.thymeleaf.prefix=${SPRING_THYMELEAF_PREFIX:classpath:/templates/}
spring.thymeleaf.suffix=${SPRING_THYMELEAF_SUFFIX:.html}
spring.thymeleaf.mode=${SPRING_THYMELEAF_MODE:HTML}
spring.thymeleaf.cache=${SPRING_THYMELEAF_CACHE:false}

# Battery REST-API ##########################################
battery.authToken=${BATTERY_AUTH_TOKEN:}
battery.url=${BATTERY_URL:}

# ChargingPoint in Watt
battery.chargingPoint=${BATTERY_CHARGING_POINT:4600}

# Target StateOfCharge in Percent
battery.target.stateOfCharge=${BATTERY_TARGET_STATE_OF_CHARGE:90}
battery.large.consumer.threshold=${BATTERY_LARGE_CONSUMER_THRESHOLD:0.5}
battery.history.max.entries=${BATTERY_HISTORY_MAX_ENTRIES:24}

# Cache duration
battery.status.cache.duration.seconds=${BATTERY_STATUS_CACHE_DURATION_SECONDS:60}

# MarketPriceScheduler cron expression
scheduled.job.cron=${SCHEDULED_JOB_CRON:0 15 14 * * *}

# ChargingScheduler accepted delay in minutes
battery.accepted.delay=${BATTERY_ACCEPTED_DELAY:30}

# AWATTAR-REST-Service for prices ############################
awattar.marketdata.url=${AWATTAR_MARKETDATA_URL:https://api.awattar.de/v1/marketdata}
awattar.authToken=${AWATTAR_AUTH_TOKEN:}

# TIBBER-REST-Service for prices  ############################
tibber.marketdata.url=${TIBBER_MARKETDATA_URL:https://api.tibber.com/v1-beta/gql}
tibber.authToken=${TIBBER_AUTH_TOKEN:}
tibber.query.today=${TIBBER_QUERY_TODAY:{"query": "{viewer {homes {currentSubscription {priceInfo {today {energy startsAt }}}}}}"}}
tibber.query.tomorrow=${TIBBER_QUERY_TOMORROW:{"query": "{viewer {homes {currentSubscription {priceInfo {tomorrow {energy startsAt }}}}}}"}}

marketdata.print=${MARKETDATA_PRINT:false}

# Marketprice-Source awattar or tibber
marketdata.source=${MARKETDATA_SOURCE:awattar}
marketdata.max.acceptable.price.cents=${MAX_ACCEPTABLE_PRICE_CENTS:15}
marketdata.price.flexibility.threshold=${MARKETDATA_PRICE_FLEXIBILITY_THRESHOLD:2}

# Logging ####################################################

# Logging Path and File Management
logging.file.name=${LOGGING_FILE_NAME:logs/power.log}
logging.pattern.file=${LOGGING_PATTERN_FILE:%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n}

# To roll over the log file after reaching 10MB
logging.file.max-size=${LOGGING_FILE_MAX_SIZE:10MB}
logging.file.max-history=${LOGGING_FILE_MAX_HISTORY:10}
logging.file.total-size-cap=${LOGGING_FILE_TOTAL_SIZE_CAP:100MB}

# Level of logging (global or specific)
logging.level.root=${LOGGING_LEVEL_ROOT:INFO}

# Explicitly set the rolling policy
logging.file.policy=${LOGGING_FILE_POLICY:rolling}

# Night period settings
night.start=${NIGHT_START:19}
night.end=${NIGHT_END:6}

# Open-Meteo API Configuration ################################

# Open-Meteo API settings
weather.api.base-url=${WEATHER_API_BASE_URL:https://api.open-meteo.com/v1/forecast}
weather.api.enabled=${WEATHER_API_ENABLED:true}
weather.api.latitude=${WEATHER_API_LATITUDE:52.52}
weather.api.longitude=${WEATHER_API_LONGITUDE:13.405}
weather.api.hourly-params=${WEATHER_API_HOURLY_PARAMS:cloudcover}
